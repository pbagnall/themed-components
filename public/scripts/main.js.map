{"version":3,"file":"main.js","sources":["../../src/utils.js","../../components/Label.js"],"sourcesContent":["export function createElement(tag, klass, text, attrs) {\n   const elem = document.createElement(tag);\n   if (klass) elem.className = klass;\n   if (text) elem.appendChild(document.createTextNode(text));\n   if (attrs) {\n      for (let [key, value] of Object.entries(attrs)) {\n         elem.setAttribute(key, value);\n      }\n   }\n\n   return elem;\n}","// Label API\n// <ul-label>Label</ul-label>\n//\n// Dismisssable: adding this attribute adds the dismiss control to the label, which fire an event when clicked.\n// The value of this attribute is ignored, it's simple a flag.\n// <ul-label dismissable>Label</ul-label>\n//\n// Icon: adds an icon before the text in the Label.\n// Permitted values are the names of icons in the Material Icon font.\n// <ul-label icon='cog'>Label</ul-label>\n//\n// Sets the size of the label. Valid sizes are [large, medium, small]\n// <ul-label size=''>Label</ul-label>\n\nimport { createElement as ce } from '../src/utils.js';\n\nlet labelStyleTemplate = document.createElement('template');\nlabelStyleTemplate.innerHTML = `\n   <style>\n      div.label {\n         display: flex;\n         align-items: flex-start;\n         box-sizing: border-box;\n         width: fit-content;\n\n         background-color: var(--label--background-color);\n         color: var(--label--color);\n         border: var(--label--border);\n\n         font-family: var(--label--font-family);\n         font-weight: 400;\n         border-radius: var(--label--border-radius);\n\n         margin: 0;\n\n         padding: var(--label--padding);\n         padding-top: 0;\n         padding-bottom: 0;\n         font-size: var(--label--font-size);\n         gap: var(--label--gap);\n\n         cursor: pointer;\n      }\n\n      div.text {\n         text-overflow: ellipsis;\n         overflow: hidden;\n         line-height: var(--label--height);        \n         white-space: var(--label--white-space, nowrap);\n         max-width: var(--label--max-width);\n      }\n\n      .icon, .close {\n         display: flex;\n         align-items: center;\n         flex-shrink: 0;\n         padding: 0;\n         margin: 0;\n         height: var(--label--height);\n         width: var(--label--icon-size);\n         overflow: hidden;\n\n         font-family: \"Material Symbols Outlined\";\n         font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 24;\n         font-size: var(--label--icon-size);\n      }\n\n      .close:hover {\n         font-variation-settings: 'FILL' 1, 'wght' 900, 'GRAD' 0, 'opsz' 24;\n      }\n</style>`;\n\nclass Label extends HTMLElement {\n   constructor() {\n      super();\n      this.attachShadow({ mode: 'open'});\n      this.shadowRoot.appendChild(labelStyleTemplate.content.cloneNode(true));\n   }\n\n   connectedCallback() {\n      this.populate();\n\n      const mutationHandler = (mutationList, observer) => { this.populate(); };\n      const observer = new MutationObserver(mutationHandler);\n      observer.observe(this, { attributes: true, childList: true, subtree: true, characterData: true });\n   }\n\n   populate() {\n      let dismissable = this.hasAttribute('dismissable');\n      let iconName = this.getAttribute('icon');\n\n      let label = this.shadowRoot.querySelector('div.label');\n      label = label ? label : ce('div','label');\n      while (label.hasChildNodes()) {\n         label.removeChild(label.firstChild);\n      }\n\n      // icon\n      if (iconName) label.appendChild(ce('div','icon', iconName));\n\n      // text\n      label.appendChild(ce('div','text',this.textContent));\n\n      // close button\n      if (dismissable) {\n         let closeButton = ce('div','close', 'close');\n         closeButton.addEventListener('click', (event) => this.click(event));\n         label.appendChild(closeButton);\n      }\n\n      this.shadowRoot.appendChild(label);\n   }\n\n   click(event) {\n      let outboundEvent = new CustomEvent(\"dismiss\", {\n         detail: {},\n         composed: true\n      });\n      this.dispatchEvent(outboundEvent);\n   }\n}\n\nwindow.addEventListener('load', () => {\n   customElements.define(\"ul-label\", Label);\n});\n"],"names":["createElement","tag","klass","text","attrs","elem","document","className","appendChild","createTextNode","key","value","Object","entries","setAttribute","labelStyleTemplate","innerHTML","Label","HTMLElement","constructor","super","this","attachShadow","mode","shadowRoot","content","cloneNode","connectedCallback","populate","MutationObserver","mutationList","observer","observe","attributes","childList","subtree","characterData","dismissable","hasAttribute","iconName","getAttribute","label","querySelector","ce","hasChildNodes","removeChild","firstChild","textContent","closeButton","addEventListener","event","click","outboundEvent","CustomEvent","detail","composed","dispatchEvent","window","customElements","define"],"mappings":"QAAO,SAASA,EAAcC,EAAKC,EAAOC,EAAMC,GAC7C,MAAMC,EAAOC,SAASN,cAAcC,GAGpC,GAFIC,IAAOG,EAAKE,UAAYL,GACxBC,GAAME,EAAKG,YAAYF,SAASG,eAAeN,IAC/CC,EACD,IAAK,IAAKM,EAAKC,KAAUC,OAAOC,QAAQT,GACrCC,EAAKS,aAAaJ,EAAKC,GAI7B,OAAON,CACV,wQCKA,IAAIU,EAAqBT,SAASN,cAAc,YAChDe,EAAmBC,UAAY,m9CAuD/B,MAAMC,UAAcC,YACjB,WAAAC,GACGC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAC1BF,KAAKG,WAAWhB,YAAYO,EAAmBU,QAAQC,WAAU,GACnE,CAED,iBAAAC,GACGN,KAAKO,WAGY,IAAIC,kBADG,CAACC,EAAcC,KAAeV,KAAKO,UAAU,IAE5DI,QAAQX,KAAM,CAAEY,YAAY,EAAMC,WAAW,EAAMC,SAAS,EAAMC,eAAe,GAC5F,CAED,QAAAR,GACG,IAAIS,EAAchB,KAAKiB,aAAa,eAChCC,EAAWlB,KAAKmB,aAAa,QAE7BC,EAAQpB,KAAKG,WAAWkB,cAAc,aAE1C,IADAD,EAAQA,GAAgBE,EAAG,MAAM,SAC1BF,EAAMG,iBACVH,EAAMI,YAAYJ,EAAMK,YAU3B,GANIP,GAAUE,EAAMjC,YAAYmC,EAAG,MAAM,OAAQJ,IAGjDE,EAAMjC,YAAYmC,EAAG,MAAM,OAAOtB,KAAK0B,cAGnCV,EAAa,CACd,IAAIW,EAAcL,EAAG,MAAM,QAAS,SACpCK,EAAYC,iBAAiB,SAAUC,GAAU7B,KAAK8B,MAAMD,KAC5DT,EAAMjC,YAAYwC,EACpB,CAED3B,KAAKG,WAAWhB,YAAYiC,EAC9B,CAED,KAAAU,CAAMD,GACH,IAAIE,EAAgB,IAAIC,YAAY,UAAW,CAC5CC,OAAQ,CAAE,EACVC,UAAU,IAEblC,KAAKmC,cAAcJ,EACrB,EAGJK,OAAOR,iBAAiB,QAAQ,KAC7BS,eAAeC,OAAO,WAAY1C,EAAM"}